{"version":3,"sources":["components/Header.js","components/Map.js","components/MapContainer.js","components/LogEntry.js","components/Log.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","rd3","Component","React","MapContainer","LogEntry","props","country","city","defficiency","Log","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mYAaeA,MAVf,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,eACf,yCACA,yBAAKA,UAAU,qB,iECJNC,EAAIC,UAEPC,IAAMD,UCKTE,MAPf,WACI,OACI,yBAAKJ,UAAU,kB,YCORK,MAVf,SAAkBC,GACd,OACI,yBAAKN,UAAU,YACX,4BAAKM,EAAMC,SACX,4BAAKD,EAAME,MACX,4BAAKF,EAAMG,eCYRC,MAhBf,WACI,OACI,yBAAKV,UAAU,OACX,kBAAC,EAAD,CAAWQ,KAAM,MAAOD,QAAS,MAAOE,YAAa,SACrD,kBAAC,EAAD,CAAWD,KAAM,OAAQD,QAAS,QAASE,YAAa,SACxD,kBAAC,EAAD,CAAWD,KAAM,UAAWD,QAAS,SAAUE,YAAa,cAC5D,kBAAC,EAAD,CAAWD,KAAM,OAAQD,QAAS,UAAWE,YAAa,SAC1D,kBAAC,EAAD,CAAWD,KAAM,QAASD,QAAS,OAAQE,YAAa,SACxD,kBAAC,EAAD,CAAWD,KAAM,SAAUD,QAAS,QAASE,YAAa,cAC1D,kBAAC,EAAD,CAAWD,KAAM,QAASD,QAAS,SAAUE,YAAa,cAC1D,kBAAC,EAAD,CAAWD,KAAM,UAAWD,QAAS,SAAUE,YAAa,SAC5D,kBAAC,EAAD,CAAWD,KAAM,OAAQD,QAAS,OAAQE,YAAa,W,YCJpDE,MAPf,WACI,OACI,yBAAKX,UAAU,YCcRY,MAbf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCHca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6a402e6e.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/Header.css';\n\nfunction Header() {\n    return (\n        <div className=\"Header\">\n            <div className=\"cute-globe\"></div>\n            <h1>NutriBoom</h1>\n            <div className=\"cute-nutrition\"></div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport '../css/Map.css';\n\nimport rd3 from 'react-d3-library';\nconst RD3Component = rd3.Component;\n\nclass Map extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {d3: ''}\n    }\n\n    render() {\n        return (\n            <div className=\"Map\">\n            </div>\n        )\n    }\n}\n\nexport default Map;","import React from 'react';\nimport '../css/MapContainer.css';\nimport Map from \"./Map\";\n\nfunction MapContainer() {\n    return (\n        <div className=\"MapContainer\">\n        </div>\n    );\n}\n\nexport default MapContainer;\n","import React from 'react';\nimport '../css/LogEntry.css';\n\nfunction LogEntry(props) {\n    return (\n        <div className=\"LogEntry\">\n            <h3>{props.country}</h3>\n            <h3>{props.city}</h3>\n            <h3>{props.defficiency}</h3>\n        </div>\n    );\n}\n\nexport default LogEntry;\n","import React from 'react';\nimport '../css/Log.css';\nimport LogEntry from \"./LogEntry\";\n\nfunction Log() {\n    return (\n        <div className=\"Log\">\n            <LogEntry  city={\"Xyz\"} country={\"Abc\"} defficiency={\"Zinc\"}/>\n            <LogEntry  city={\"Xyz1\"} country={\"Abc11\"} defficiency={\"Zinc\"}/>\n            <LogEntry  city={\"Xyz2123\"} country={\"Abc212\"} defficiency={\"Vitamin A\"}/>\n            <LogEntry  city={\"Xyz3\"} country={\"Abc3213\"} defficiency={\"Zinc\"}/>\n            <LogEntry  city={\"Xyz32\"} country={\"Abc3\"} defficiency={\"Zinc\"}/>\n            <LogEntry  city={\"Xyz334\"} country={\"Abc31\"} defficiency={\"Vitamin A\"}/>\n            <LogEntry  city={\"Xyz34\"} country={\"Abc412\"} defficiency={\"Vitamin A\"}/>\n            <LogEntry  city={\"Xyz3123\"} country={\"Abc323\"} defficiency={\"Zinc\"}/>\n            <LogEntry  city={\"Xyz3\"} country={\"Abc3\"} defficiency={\"Zinc\"}/>\n        </div>\n    );\n}\n\nexport default Log;\n","import React from 'react';\nimport '../css/Footer.css';\nimport CoolLink from \"./CoolLink\";\n\nfunction Footer() {\n    return (\n        <div className=\"Footer\">\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './css/App.css';\nimport Header from \"./components/Header\";\nimport MapContainer from \"./components/MapContainer\";\nimport Log from \"./components/Log\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"body-container\">\n        <Log/>\n        <MapContainer/>\n      </div>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}